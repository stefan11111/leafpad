diff --git a/src/callback.c b/src/callback.c
index 7419294..f71dd12 100644
--- a/src/callback.c
+++ b/src/callback.c
@@ -83,7 +83,7 @@ void on_file_open(void)
 		else {
 			g_free(pub->fi);
 			pub->fi = fi;
-			undo_clear_all(pub->mw->buffer);
+			undo_clear_all();
 //			set_main_window_title();
 			force_call_cb_modified_changed(pub->mw->view);
 //			undo_init(sd->mainwin->textview, sd->mainwin->textbuffer, sd->mainwin->menubar);
@@ -119,7 +119,7 @@ gint on_file_save_as(void)
 	}
 	g_free(pub->fi);
 	pub->fi = fi;
-	undo_clear_all(pub->mw->buffer);
+	undo_clear_all();
 //	set_main_window_title();
 	force_call_cb_modified_changed(pub->mw->view);
 //	undo_init(sd->mainwin->textview, sd->mainwin->textbuffer, sd->mainwin->menubar);
@@ -160,7 +160,7 @@ void on_file_close(void)
 		pub->fi->charset = NULL;
 		pub->fi->charset_flag = FALSE;
 		pub->fi->lineend = LF;
-		undo_clear_all(pub->mw->buffer);
+		undo_clear_all();
 //		set_main_window_title();
 		force_call_cb_modified_changed(pub->mw->view);
 		force_unblock_cb_modified_changed(pub->mw->view);
diff --git a/src/dnd.c b/src/dnd.c
index d1aab27..af63402 100644
--- a/src/dnd.c
+++ b/src/dnd.c
@@ -77,7 +77,7 @@ static void dnd_open_first_file(gchar *filename)
 	else {
 		g_free(pub->fi);
 		pub->fi = fi;
-		undo_clear_all(pub->mw->buffer);
+		undo_clear_all();
 		set_main_window_title();
 //		undo_init(sd->mainwin->textview, sd->mainwin->textbuffer, sd->mainwin->menubar);
 	}
@@ -87,6 +87,9 @@ static void dnd_drag_data_recieved_handler(GtkWidget *widget,
 	GdkDragContext *context, gint x, gint y,
 	GtkSelectionData *selection_data, guint info, guint time)
 {
+	(void)x;
+	(void)y;
+	(void)time;
 	static gboolean flag_called_once = FALSE;
 	gchar **files;
 	gchar *filename;
@@ -185,6 +188,10 @@ DV(g_print(">%s\n", comline));
 static gboolean dnd_drag_motion_handler(GtkWidget *widget,
 	GdkDragContext *context, gint x, gint y, guint time)
 {
+	(void)widget;
+	(void)x;
+	(void)y;
+	(void)time;
 	GList *targets;
 	gchar *name;
 	gboolean flag = FALSE;
diff --git a/src/emacs.c b/src/emacs.c
index a364fa7..d880e2d 100644
--- a/src/emacs.c
+++ b/src/emacs.c
@@ -24,6 +24,7 @@
 
 static void cb_key_release_event(GtkWidget *view, GdkEventKey *event)
 {
+	(void)view;
 //g_print("key-release-event: 0x%X\n", event->keyval);
 	switch (event->keyval) {
 	case GDK_x:
@@ -34,6 +35,7 @@ static void cb_key_release_event(GtkWidget *view, GdkEventKey *event)
 
 static void cb_key_press_event(GtkWidget *view, GdkEventKey *event)
 {
+	(void)view;
 //g_print("key-release-event: 0x%X\n", event->keyval);
 	if (event->keyval < 0x1000 || event->keyval == GDK_Escape) {
 		switch (event->keyval) {
diff --git a/src/gtkprint.c b/src/gtkprint.c
index 832f964..9ed19e6 100644
--- a/src/gtkprint.c
+++ b/src/gtkprint.c
@@ -82,6 +82,8 @@ static void cb_begin_print(GtkPrintOperation *op,
 static void cb_draw_page(GtkPrintOperation *op,
 		GtkPrintContext *ctx, gint page_nr, gpointer data)
 {
+	(void)op;
+	(void)data;
 	cairo_t *cr;
 	PangoLayoutLine *line;
 	gint n_line, i, j = 0;
@@ -125,6 +127,9 @@ static void cb_draw_page(GtkPrintOperation *op,
 static void cb_end_print(GtkPrintOperation *op,
 		GtkPrintContext *ctx, gpointer data)
 {
+	(void)op;
+	(void)ctx;
+	(void)data;
 	g_object_unref(layout);
 }
 
@@ -190,6 +195,7 @@ void create_gtkprint_session(GtkTextView *text_view, const gchar *title)
 	case GTK_PRINT_OPERATION_RESULT_ERROR:
 		create_error_dialog(text_view, err->message);
 		g_error_free(err);
+	/* FALLTHROUGH */
 	case GTK_PRINT_OPERATION_RESULT_APPLY:
 		if (settings)
 			g_object_unref(settings);
diff --git a/src/gtksourceiter.c b/src/gtksourceiter.c
index c3d518f..f91a28c 100644
--- a/src/gtksourceiter.c
+++ b/src/gtksourceiter.c
@@ -551,7 +551,7 @@ gtk_source_iter_forward_search (const GtkTextIter   *iter,
 	g_return_val_if_fail (str != NULL, FALSE);
 
 	if ((flags & GTK_SOURCE_SEARCH_CASE_INSENSITIVE) == 0)
-		return gtk_text_iter_forward_search (iter, str, flags,
+		return gtk_text_iter_forward_search (iter, str, (GtkTextSearchFlags)flags,
 						     match_start, match_end,
 						     limit); 
 
@@ -654,7 +654,7 @@ gtk_source_iter_backward_search (const GtkTextIter   *iter,
 	g_return_val_if_fail (str != NULL, FALSE);
 
 	if ((flags & GTK_SOURCE_SEARCH_CASE_INSENSITIVE) == 0)
-		return gtk_text_iter_backward_search (iter, str, flags,
+		return gtk_text_iter_backward_search (iter, str, (GtkTextSearchFlags)flags,
 						      match_start, match_end,
 						      limit); 
 
diff --git a/src/menu.c b/src/menu.c
index 7bdd4ea..6a5f42b 100644
--- a/src/menu.c
+++ b/src/menu.c
@@ -29,7 +29,7 @@ static GtkWidget *menu_item_delete;
 static GtkItemFactoryEntry menu_items[] =
 {
 	{ N_("/_File"), NULL,
-		NULL, 0, "<Branch>" },
+		NULL, 0, "<Branch>", NULL },
 	{ N_("/File/_New"), "<control>N",
 		G_CALLBACK(on_file_new), 0, "<StockItem>", GTK_STOCK_NEW },
 	{ N_("/File/_Open..."), "<control>O",
@@ -39,7 +39,7 @@ static GtkItemFactoryEntry menu_items[] =
 	{ N_("/File/Save _As..."), "<shift><control>S",
 		G_CALLBACK(on_file_save_as), 0, "<StockItem>", GTK_STOCK_SAVE_AS },
 	{ "/File/---", NULL,
-		NULL, 0, "<Separator>" },
+		NULL, 0, "<Separator>", NULL },
 #ifdef ENABLE_PRINT
 #	if GTK_CHECK_VERSION(2, 10, 0)
 	{ N_("/File/Print Pre_view"), "<shift><control>P",
@@ -49,19 +49,19 @@ static GtkItemFactoryEntry menu_items[] =
 		G_CALLBACK(on_file_print), 0, "<StockItem>", GTK_STOCK_PRINT },
 #	if GTK_CHECK_VERSION(2, 10, 0)
 	{ "/File/---", NULL,
-		NULL, 0, "<Separator>" },
+		NULL, 0, "<Separator>", NULL },
 #	endif
 #endif
 	{ N_("/File/_Quit"), "<control>Q",
 		G_CALLBACK(on_file_quit), 0, "<StockItem>", GTK_STOCK_QUIT },
 	{ N_("/_Edit"),	 NULL,
-		NULL, 0, "<Branch>" },
+		NULL, 0, "<Branch>", NULL },
 	{ N_("/Edit/_Undo"), "<control>Z",
 		G_CALLBACK(on_edit_undo), 0, "<StockItem>", GTK_STOCK_UNDO },
 	{ N_("/Edit/_Redo"), "<shift><control>Z",
 		G_CALLBACK(on_edit_redo), 0, "<StockItem>", GTK_STOCK_REDO },
 	{ "/Edit/---", NULL,
-		NULL, 0, "<Separator>" },
+		NULL, 0, "<Separator>", NULL },
 	{ N_("/Edit/Cu_t"), "<control>X",
 		G_CALLBACK(on_edit_cut), 0, "<StockItem>", GTK_STOCK_CUT },
 	{ N_("/Edit/_Copy"), "<control>C",
@@ -71,37 +71,37 @@ static GtkItemFactoryEntry menu_items[] =
 	{ N_("/Edit/_Delete"), NULL,
 		G_CALLBACK(on_edit_delete), 0, "<StockItem>", GTK_STOCK_DELETE },
 	{ "/Edit/---", NULL,
-		NULL, 0, "<Separator>" },
+		NULL, 0, "<Separator>", NULL },
 	{ N_("/Edit/Select _All"), "<control>A",
-		G_CALLBACK(on_edit_select_all), 0 },
+		G_CALLBACK(on_edit_select_all), 0, NULL, NULL },
 	{ N_("/_Search"),	 NULL,
-		NULL, 0, "<Branch>" },
+		NULL, 0, "<Branch>", NULL },
 	{ N_("/Search/_Find..."), "<control>F",
 		G_CALLBACK(on_search_find), 0, "<StockItem>", GTK_STOCK_FIND },
 	{ N_("/Search/Find _Next"), "<control>G",
-		G_CALLBACK(on_search_find_next), 0 },
+		G_CALLBACK(on_search_find_next), 0, NULL, NULL },
 	{ N_("/Search/Find _Previous"), "<shift><control>G",
-		G_CALLBACK(on_search_find_previous), 0 },
+		G_CALLBACK(on_search_find_previous), 0, NULL, NULL },
 	{ N_("/Search/_Replace..."), "<control>H",
 		G_CALLBACK(on_search_replace), 0, "<StockItem>", GTK_STOCK_FIND_AND_REPLACE },
 	{ "/Search/---", NULL,
-		NULL, 0, "<Separator>" },
+		NULL, 0, "<Separator>", NULL },
 	{ N_("/Search/_Jump To..."), "<control>J",
 		G_CALLBACK(on_search_jump_to), 0, "<StockItem>", GTK_STOCK_JUMP_TO },
 	{ N_("/_Options"), NULL,
-		NULL, 0, "<Branch>" },
+		NULL, 0, "<Branch>", NULL },
 	{ N_("/Options/_Font..."), NULL,
 		G_CALLBACK(on_option_font), 0, "<StockItem>", GTK_STOCK_SELECT_FONT },
 	{ N_("/Options/_Word Wrap"), NULL,
-		G_CALLBACK(on_option_word_wrap), 0, "<CheckItem>" },
+		G_CALLBACK(on_option_word_wrap), 0, "<CheckItem>", NULL },
 	{ N_("/Options/_Line Numbers"), NULL,
-		G_CALLBACK(on_option_line_numbers), 0, "<CheckItem>" },
+		G_CALLBACK(on_option_line_numbers), 0, "<CheckItem>", NULL },
 	{ "/Options/---", NULL,
-		NULL, 0, "<Separator>" },
+		NULL, 0, "<Separator>", NULL },
 	{ N_("/Options/_Auto Indent"), NULL,
-		G_CALLBACK(on_option_auto_indent), 0, "<CheckItem>" },
+		G_CALLBACK(on_option_auto_indent), 0, "<CheckItem>" , NULL},
 	{ N_("/_Help"), NULL,
-		NULL, 0, "<Branch>" },
+		NULL, 0, "<Branch>", NULL },
 	{ N_("/Help/_About"), NULL,
 #if GTK_CHECK_VERSION(2, 6, 0)
 		G_CALLBACK(on_help_about), 0, "<StockItem>", GTK_STOCK_ABOUT },
@@ -114,6 +114,8 @@ static gint nmenu_items = sizeof(menu_items) / sizeof(GtkItemFactoryEntry);
 
 static gchar *menu_translate(const gchar *path, gpointer data)
 {
+	(void)data;
+
 	gchar *str;
 	
 	str = (gchar *)_(path);
diff --git a/src/selector.c b/src/selector.c
index bbcb32c..1e79811 100644
--- a/src/selector.c
+++ b/src/selector.c
@@ -221,7 +221,7 @@ static void cb_select_charset(GtkOptionMenu *option_menu, FileInfo *selected_fi)
 	index_history = gtk_option_menu_get_history(option_menu);
 	if (!charset_menu_init_flag) {
 		ctable = get_charset_table();
-		if (index_history < ctable->num + mode) {
+		if ((gint)index_history < ctable->num + mode) {
 			if (selected_fi->charset)
 				g_free(selected_fi->charset);
 			if (index_history == 0 && mode == OPEN)
diff --git a/src/undo.c b/src/undo.c
index c3c8985..89c8292 100644
--- a/src/undo.c
+++ b/src/undo.c
@@ -50,7 +50,7 @@ static gint modified_step;
 static guint prev_keyval;
 static gboolean seq_reserve = FALSE;
 
-static void undo_flush_temporal_buffer(GtkTextBuffer *buffer);
+static void undo_flush_temporal_buffer(void);
 
 static GList *undo_clear_info_list(GList *info_list)
 {
@@ -62,7 +62,7 @@ static GList *undo_clear_info_list(GList *info_list)
 	return info_list;
 }
 
-static void undo_append_undo_info(GtkTextBuffer *buffer, gchar command, gint start, gint end, gchar *str)
+static void undo_append_undo_info(gchar command, gint start, gint end, gchar *str)
 {
 	UndoInfo *ui = g_malloc(sizeof(UndoInfo));
 	
@@ -135,7 +135,7 @@ static void undo_create_undo_info(GtkTextBuffer *buffer, gchar command, gint sta
 			gtk_widget_set_sensitive(redo_w, FALSE);
 			return;
 		}
-		undo_append_undo_info(buffer, ui_tmp->command, ui_tmp->start, ui_tmp->end, g_strdup(undo_gstr->str));
+		undo_append_undo_info(ui_tmp->command, ui_tmp->start, ui_tmp->end, g_strdup(undo_gstr->str));
 		undo_gstr = g_string_erase(undo_gstr, 0, -1);
 	}
 	
@@ -151,7 +151,7 @@ static void undo_create_undo_info(GtkTextBuffer *buffer, gchar command, gint sta
 		undo_gstr = g_string_erase(undo_gstr, 0, -1);
 		g_string_append(undo_gstr, str);
 	} else 
-		undo_append_undo_info(buffer, command, start, end, g_strdup(str));
+		undo_append_undo_info(command, start, end, g_strdup(str));
 	
 	redo_list = undo_clear_info_list(redo_list);
 	prev_keyval = keyval;
@@ -164,6 +164,7 @@ static void undo_create_undo_info(GtkTextBuffer *buffer, gchar command, gint sta
 static void cb_insert_text(GtkTextBuffer *buffer, GtkTextIter *iter, gchar *str,
 gint len)
 {
+	(void)len;
 	gint start, end;
 	
 DV(	g_print("insert-text\n"));
@@ -189,9 +190,9 @@ DV(	g_print("delete-range\n"));
 	undo_create_undo_info(buffer, command, start, end);
 }
 
-void undo_reset_modified_step(GtkTextBuffer *buffer)
+void undo_reset_modified_step(void)
 {
-	undo_flush_temporal_buffer(buffer);
+	undo_flush_temporal_buffer();
 	modified_step = g_list_length(undo_list);
 DV(g_print("undo_reset_modified_step: Reseted modified_step by %d\n", modified_step));
 }
@@ -200,7 +201,7 @@ static void undo_check_modified_step(GtkTextBuffer *buffer)
 {
 	gboolean flag;
 	
-	flag = (modified_step == g_list_length(undo_list));
+	flag = (modified_step == (gint)g_list_length(undo_list));
 //g_print("%d - %d = %d\n", modified_step, g_list_length(undo_list), flag);
 	if (gtk_text_buffer_get_modified(buffer) == flag)
 		gtk_text_buffer_set_modified(buffer, !flag);
@@ -241,11 +242,11 @@ static void cb_end_user_action(GtkTextBuffer *buffer)
 DV(g_print("end-user-action(block_func)\n"));
 }
 
-void undo_clear_all(GtkTextBuffer *buffer)
+void undo_clear_all(void)
 {
 	undo_list = undo_clear_info_list(undo_list);
 	redo_list = undo_clear_info_list(redo_list);
-	undo_reset_modified_step(buffer);
+	undo_reset_modified_step();
 	gtk_widget_set_sensitive(undo_w, FALSE);
 	gtk_widget_set_sensitive(redo_w, FALSE);
 	
@@ -274,7 +275,7 @@ void undo_init(GtkWidget *view, GtkWidget *undo_button, GtkWidget *redo_button)
 	ui_tmp = g_malloc(sizeof(UndoInfo));
 	undo_gstr = g_string_new("");
 	
-	undo_clear_all(buffer);
+	undo_clear_all();
 }
 
 void undo_set_sequency(gboolean seq)
@@ -289,10 +290,10 @@ void undo_set_sequency_reserve(void)
 	seq_reserve = TRUE;
 }
 
-static void undo_flush_temporal_buffer(GtkTextBuffer *buffer)
+static void undo_flush_temporal_buffer(void)
 {
 	if (undo_gstr->len) {
-		undo_append_undo_info(buffer, ui_tmp->command,
+		undo_append_undo_info(ui_tmp->command,
 			ui_tmp->start, ui_tmp->end, g_strdup(undo_gstr->str));
 		undo_gstr = g_string_erase(undo_gstr, 0, -1);
 	}
@@ -303,7 +304,7 @@ gboolean undo_undo_real(GtkTextBuffer *buffer)
 	GtkTextIter start_iter, end_iter;
 	UndoInfo *ui;
 	
-	undo_flush_temporal_buffer(buffer);
+	undo_flush_temporal_buffer();
 	if (g_list_length(undo_list)) {
 //		undo_block_signal(buffer);
 		ui = g_list_last(undo_list)->data;
diff --git a/src/undo.h b/src/undo.h
index 94bd546..b255b9c 100644
--- a/src/undo.h
+++ b/src/undo.h
@@ -20,8 +20,8 @@
 #ifndef _UNDO_H
 #define _UNDO_H
 
-void undo_reset_modified_step(GtkTextBuffer *buffer);
-void undo_clear_all(GtkTextBuffer *buffer);
+void undo_reset_modified_step(void);
+void undo_clear_all(void);
 void undo_init(GtkWidget *view, GtkWidget *undo_button, GtkWidget *redo_button);
 void undo_set_sequency(gboolean seq);
 void undo_set_sequency_reserve(void);
diff --git a/src/view.c b/src/view.c
index 7a03ea4..bb48f40 100644
--- a/src/view.c
+++ b/src/view.c
@@ -175,6 +175,7 @@ static gboolean cb_key_press_event(GtkWidget *view, GdkEventKey *event)
 			indent_toggle_tab_width(view);
 			return TRUE;
 		}
+	/* FALLTHROUGH */
 	case GDK_ISO_Left_Tab:
 		if (event->state & GDK_SHIFT_MASK)
 			indent_multi_line_unindent(GTK_TEXT_VIEW(view)->buffer);
@@ -226,7 +227,7 @@ static void cb_modified_changed(GtkTextBuffer *buffer, GtkWidget *view)
 		title = g_strconcat("*", filename, NULL);
 	else {
 		title = g_strdup(filename);
-		undo_reset_modified_step(buffer);
+		undo_reset_modified_step();
 	}
 	g_free(filename);
 	gtk_window_set_title(GTK_WINDOW(gtk_widget_get_toplevel(view)), title);
